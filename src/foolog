{
    "type": "Program",
    "body": [
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "hello"
            },
            "params": [],
            "defaults": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "hello"
                            },
                            "arguments": []
                        }
                    },
                    {
                        "type": "IfStatement",
                        "test": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                        },
                        "consequent": {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                }
                            }
                        },
                        "alternate": null
                    }
                ]
            },
            "rest": null,
            "generator": false,
            "expression": false
        },
        {
            "type": "IfStatement",
            "test": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
            },
            "consequent": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "hello"
                            },
                            "arguments": []
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            }
                        }
                    }
                ]
            },
            "alternate": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "hello"
                            },
                            "arguments": []
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            }
                        }
                    }
                ]
            }
        }
    ]
}
node0
{ type: 'ProgramEntry' }
node1
{ type: 'ProgramExit' }
node2
{ type: 'FunctionDeclaration',
  id: { type: 'Identifier', name: 'hello' },
  params: [],
  defaults: [],
  rest: null,
  generator: false,
  expression: false }
node3
{ type: 'FunctionExit' }
node4
{ type: 'ExpressionStatement',
  expression: 
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: 'hello' },
     arguments: [] } }
edge0
node2 -> node4
node5
{ type: 'IfStatement',
  test: { type: 'Literal', value: 0, raw: '0' } }
edge1
node4 -> node5
node6
{ type: 'EndIf' }
node7
{ type: 'ExpressionStatement',
  expression: 
   { type: 'AssignmentExpression',
     operator: '=',
     left: { type: 'Identifier', name: 'a' },
     right: { type: 'Literal', value: 0, raw: '0' } } }
edge2
node5 -> node7
edge3
node7 -> node6
node8
{ type: 'EmptyStatement' }
edge4
node5 -> node8
edge5
node8 -> node6
edge6
node6 -> node3
node9
{ type: 'IfStatement',
  test: { type: 'Literal', value: 1, raw: '1' } }
edge7
node0 -> node9
node10
{ type: 'EndIf' }
node11
{ type: 'ExpressionStatement',
  expression: 
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: 'hello' },
     arguments: [] } }
edge8
node9 -> node11
node12
{ type: 'ExpressionStatement',
  expression: 
   { type: 'AssignmentExpression',
     operator: '=',
     left: { type: 'Identifier', name: 'a' },
     right: { type: 'Literal', value: 1, raw: '1' } } }
edge9
node11 -> node12
edge10
node12 -> node10
node13
{ type: 'ExpressionStatement',
  expression: 
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: 'hello' },
     arguments: [] } }
edge11
node9 -> node13
node14
{ type: 'ExpressionStatement',
  expression: 
   { type: 'AssignmentExpression',
     operator: '=',
     left: { type: 'Identifier', name: 'a' },
     right: { type: 'Literal', value: 2, raw: '2' } } }
edge12
node13 -> node14
edge13
node14 -> node10
edge14
node10 -> node1
[ { type: 'Program',
    entry: 
     { id: 0,
       children: [Object],
       edges: [Object],
       functions: [Object],
       syntax: [Object],
       visited: null },
    exit: 
     { id: 1,
       children: [],
       edges: [],
       functions: {},
       syntax: [Object],
       visited: null } } ]
function hello() {
    console.log('node4'), hello();
    if (0)
        console.log('node7'), a = 0;
}
if (1) {
    console.log('node11'), hello();
    console.log('node12'), a = 1;
} else {
    console.log('node13'), hello();
    console.log('node14'), a = 2;
}
{
    "type": "Program",
    "body": [
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "hello"
            },
            "params": [],
            "defaults": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "hello"
                            },
                            "arguments": []
                        }
                    },
                    {
                        "type": "IfStatement",
                        "test": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                        },
                        "consequent": {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "a"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 3,
                                    "raw": "3"
                                }
                            }
                        },
                        "alternate": null
                    }
                ]
            },
            "rest": null,
            "generator": false,
            "expression": false
        },
        {
            "type": "IfStatement",
            "test": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
            },
            "consequent": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "hello"
                            },
                            "arguments": []
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "a"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 4,
                                "raw": "4"
                            }
                        }
                    }
                ]
            },
            "alternate": {
                "type": "ExpressionStatement",
                "expression": {
                    "type": "CallExpression",
                    "callee": {
                        "type": "Identifier",
                        "name": "hello"
                    },
                    "arguments": []
                }
            }
        }
    ]
}
node0
{ type: 'ProgramEntry' }
node1
{ type: 'ProgramExit' }
node2
{ type: 'FunctionDeclaration',
  id: { type: 'Identifier', name: 'hello' },
  params: [],
  defaults: [],
  rest: null,
  generator: false,
  expression: false }
node3
{ type: 'FunctionExit' }
node4
{ type: 'ExpressionStatement',
  expression: 
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: 'hello' },
     arguments: [] } }
edge0
node2 -> node4
node5
{ type: 'IfStatement',
  test: { type: 'Literal', value: 0, raw: '0' } }
edge1
node4 -> node5
node6
{ type: 'EndIf' }
node7
{ type: 'ExpressionStatement',
  expression: 
   { type: 'AssignmentExpression',
     operator: '=',
     left: { type: 'Identifier', name: 'a' },
     right: { type: 'Literal', value: 3, raw: '3' } } }
edge2
node5 -> node7
edge3
node7 -> node6
node8
{ type: 'EmptyStatement' }
edge4
node5 -> node8
edge5
node8 -> node6
edge6
node6 -> node3
node9
{ type: 'IfStatement',
  test: { type: 'Literal', value: 1, raw: '1' } }
edge7
node0 -> node9
node10
{ type: 'EndIf' }
node11
{ type: 'ExpressionStatement',
  expression: 
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: 'hello' },
     arguments: [] } }
edge8
node9 -> node11
node12
{ type: 'ExpressionStatement',
  expression: 
   { type: 'AssignmentExpression',
     operator: '=',
     left: { type: 'Identifier', name: 'a' },
     right: { type: 'Literal', value: 4, raw: '4' } } }
edge9
node11 -> node12
edge10
node12 -> node10
node13
{ type: 'ExpressionStatement',
  expression: 
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: 'hello' },
     arguments: [] } }
edge11
node9 -> node13
edge12
node13 -> node10
edge13
node10 -> node1
[ { type: 'Program',
    entry: 
     { id: 0,
       children: [Object],
       edges: [Object],
       functions: [Object],
       syntax: [Object],
       visited: null },
    exit: 
     { id: 1,
       children: [],
       edges: [],
       functions: {},
       syntax: [Object],
       visited: null } } ]
0 0 ProgramEntry
0 0 9 9
9 9 IfStatement
9 9 11 11
danger 8
9 9 13 13
danger 11
